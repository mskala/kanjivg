#!/usr/bin/perl -CDS

# Test suite runner by Matthew Skala
# Copyright and licensing still to be decided, beware

# This is intended to serve a purpose similar to that of Automake's test
# suite, but suitable for KanjiVG.  In particular, Automake's test suite
# tries to create shell commands that include a list of all the tests to
# be run.  We have (at this writing, likely more in the future) 11000
# tests.  That's more than will fit in a shell command line, so Automake
# dies horribly.

use utf8;

########################################################################

# Directory for tests.
$test_dir='test';

# Directory for test logs.  All directories are relative to current working
# dir when this script is invoked.  Will be created if necessary.
$log_dir='test_log';

# Matching pattern for kanji filenames - shell glob.  All files matching
# this will be considered to indicate the existence of kanji.  If a
# KANJI_GLOB environment variable exists, that will be used instead (allows
# checking just a subset of the kanji).
$kanji_glob='kanji/?????.svg';

# Matching pattern for kanji filenames - regular expression.  Given that
# a file matching the shell glob exists, this pattern will be applied, and
# if it also matches, the first matching register ($1) will be taken as the
# ID of the kanji.  With duplicates removed, the resulting list will feed
# into the "per-kanji" tests described below.
$kanji_regexp='^kanji/(.*?)\.svg$';

# List of general tests.  Keys are test names, and should be executable
# files in the test directory.  Values are short descriptions.  Interface is
# somewhat like that of Automake tests: exit value should be 0, 1, 77, or 99
# for "pass," "fail," "skip" (unable to provide a useful result, not a true
# pass but should not cause overall failure), or "epic fail" (cause overall
# failure even if the user said to skip).  By default, all tests listed in
# this array will be run.  Can be overridden by the TESTS environment
# variable.  The special value "per-kanji" is handled internally and means
# "run all the per-kanji tests described below".
%tests=(
# 'dummy'    =>'dummy test to test the scripts',
  'per-kanji'=>'run the PK_TESTS tests on individual kanji',
);

# List of per-kanji tests.  Much like the general tests above, except each
# one will be run multiple times, each time giving it a kanji ID as a
# command-line parameter.  Can be overridden by the PK_TESTS environment
# variable.
%pk_tests=(
# 'dummy-pk' =>'dummy test to test the scripts',
  'gpmix'    =>'check for groups and paths as siblings',
  'strokenum'=>'check the kvg:strokenum attribute',
  'xml'      =>'basic XML parse',
);

########################################################################

# ANSI escape sequences
$green="\e[32m";
$red="\e[31m";
$cyan="\e[36m";
$magenta="\e[35m";
$bright="\e[1m";
$normal="\e[0m";

########################################################################

# create log dir if needed, open master log
-d $log_dir || mkdir $log_dir || die "Can't create log dir";
open(LOG,">$log_dir/suite.log");

print "${bright}KanjiVG Test Suite$normal\n\n";
print LOG "KanjiVG Test Suite\n\n";

# find the general tests to do
@todo_tests=();
$do_pk=0;
if (exists $ENV{'TESTS'}) {
  @cfg_tests=split(/[, :]+/,$ENV{'TESTS'});
} else {
  @cfg_tests=keys %tests;
}
foreach (@cfg_tests) {
  if ($_ eq 'per-kanji') {
    $do_pk=1;
  } elsif (exists $tests{$_}) {
    push @todo_tests,$_;
  }
}
@todo_tests=sort @todo_tests;

if ($do_pk) {
  # find the per-kanji tests to do
  if (exists $ENV{'PK_TESTS'}) {
    @todo_pk_tests=sort split(/[, :]+/,$ENV{'PK_TESTS'});
  } else {
    @todo_pk_tests=sort keys %pk_tests;
  }

  # find the kanji IDs
  @todo_kanji=();
  $kanji_glob=$ENV{'KANJI_GLOB'} if exists $ENV{'KANJI_GLOB'};
  foreach (glob $kanji_glob) {
    if (/$kanji_regexp/) {
      push @todo_kanji,$1;
    }
  }
  @todo_kanji=sort @todo_kanji;
}

# run per-kanji tests
if ($do_pk && ($#todo_pk_tests>=0) && ($#todo_kanji>=0)) {
  print 'Running '.($#todo_pk_tests+1).' per-kanji tests on '.
    ($#todo_kanji+1)." kanji...\n";
  print LOG 'Running '.($#todo_pk_tests+1).' per-kanji tests on '.
    ($#todo_kanji+1)." kanji...\n";

  $count_pk_pass=0;
  $count_pk_fail=0;
  $count_pk_skip=0;
  $count_pk_epic=0;
  $kcount=0;
  $tcount=0;

  foreach $kanji (@todo_kanji) {
    $kcount++;
    if ($kanji=~/([0-9a-f]{5})/) {
      $code=hex("0x$1");
      $literal=($code<0x2a00?' (':'(').chr(hex("0x$1")).')';
    } else {
      $literal='    ';
    }
    printf '%5d/%5d %s %-24s',
      $kcount,$#todo_kanji+1,$literal,$kanji;

    $count_this_pass=0;
    $count_this_fail=0;
    $count_this_skip=0;
    $count_this_epic=0;
    
    open(KLOG,">$log_dir/$kanji.log");
    print KLOG "Test report for $kanji $literal\n";
    
    foreach (@todo_pk_tests) {
      $tcount++;
      if (($child=fork)==0) {
        open(STDOUT,'>&KLOG');
        open(STDERR,'>&KLOG');
        exec "$test_dir/$_",$kanji;
        exit(255);
      }
      waitpid($child,0);
      $result=$?>>8;
      if ($result==0) {
        $count_pk_pass++;
        $count_this_pass++;
        $count_pk_test_pass{$_}++;
        print KLOG "PASS: $_\n";
      } elsif ($result==77) {
        $count_pk_skip++;
        $count_this_skip++;
        $count_pk_test_skip{$_}++;
        print KLOG "SKIP: $_\n";
      } elsif ($result==99) {
        $count_pk_epic++;
        $count_this_epic++;
        $count_pk_test_epic{$_}++;
        print KLOG "EPIC: $_\n";
      } else {
        $count_pk_fail++;
        $count_this_fail++;
        $count_pk_test_fail{$_}++;
        print KLOG "FAIL: $_\n";
      }
    }
    
    close(KLOG);

    if ($count_this_fail+$count_this_epic>0) {
      print LOG "\n";
      open(KLOG,"$log_dir/$kanji.log");
      while (<KLOG>) { print LOG; }
      close(KLOG);
    }

    printf LOG '%5d/%5d %s %-24s',
      $kcount,$#todo_kanji+1,$literal,$kanji;

    if ($count_this_pass>0) {
      printf " %3d ${green}PASS$normal",$count_this_pass;
      printf LOG " %3d PASS",$count_this_pass;
    } else {
      print  '         ';
      print  LOG '         ';
    }
    if ($count_this_fail>0) {
      printf " %3d ${red}FAIL$normal",$count_this_fail;
      printf LOG " %3d FAIL",$count_this_fail;
    } else {
      print  '         ';
      print  LOG '         ';
    }
    if ($count_this_skip>0) {
      printf " %3d ${cyan}SKIP$normal",$count_this_skip;
      printf LOG " %3d SKIP",$count_this_skip;
    } else {
      print  '         ';
      print  LOG '         ';
    }
    if ($count_this_epic>0) {
      printf " %3d ${magenta}EPIC$normal",$count_this_epic;
      printf LOG " %3d EPIC",$count_this_epic;
    }
    print "\n";
    print LOG "\n";
  }
  
  print "\nSummary of tests on ".($#todo_kanji+1)." kanji\n";
  print ' 'x16;
  print $count_pk_pass>0?' -----PASS----- ':' 'x16;
  print $count_pk_fail>0?' -----FAIL----- ':' 'x16;
  print $count_pk_skip>0?' -----SKIP----- ':' 'x16;
  print $count_pk_epic>0?' -----EPIC-----':'';
  print "\n";
  print LOG "\nSummary of tests on ".($#todo_kanji+1)." kanji\n";
  print LOG ' 'x16;
  print LOG $count_pk_pass>0?' -----PASS----- ':' 'x16;
  print LOG $count_pk_fail>0?' -----FAIL----- ':' 'x16;
  print LOG $count_pk_skip>0?' -----SKIP----- ':' 'x16;
  print LOG $count_pk_epic>0?' -----EPIC-----':'';
  print LOG "\n";
  
  foreach (@todo_pk_tests) {
    printf "%-16s",$_;
    printf LOG "%-16s",$_;
    if ($count_pk_test_pass{$_}>0) {
      printf " %7d %5.1f%% ",$count_pk_test_pass{$_},
        100*$count_pk_test_pass{$_}/($#todo_kanji+1);
      printf LOG " %7d %5.1f%% ",$count_pk_test_pass{$_},
        100*$count_pk_test_pass{$_}/($#todo_kanji+1);
    } else {
      print ' 'x16;
      print LOG ' 'x16;
    }
    if ($count_pk_test_fail{$_}>0) {
      printf " %7d %5.1f%% ",$count_pk_test_fail{$_},
        100*$count_pk_test_fail{$_}/($#todo_kanji+1);
      printf LOG " %7d %5.1f%% ",$count_pk_test_fail{$_},
        100*$count_pk_test_fail{$_}/($#todo_kanji+1);
    } else {
      print ' 'x16;
      print LOG ' 'x16;
    }
    if ($count_pk_test_skip{$_}>0) {
      printf " %7d %5.1f%% ",$count_pk_test_skip{$_},
        100*$count_pk_test_skip{$_}/($#todo_kanji+1);
      printf LOG " %7d %5.1f%% ",$count_pk_test_skip{$_},
        100*$count_pk_test_skip{$_}/($#todo_kanji+1);
    } else {
      print ' 'x16;
      print LOG ' 'x16;
    }
    if ($count_pk_test_epic{$_}>0) {
      printf " %7d %5.1f%% ",$count_pk_test_epic{$_},
        100*$count_pk_test_epic{$_}/($#todo_kanji+1);
      printf LOG " %7d %5.1f%% ",$count_pk_test_epic{$_},
        100*$count_pk_test_epic{$_}/($#todo_kanji+1);
    } else {
      print ' 'x16;
      print LOG ' 'x16;
    }
  }
  
  printf "TOTAL  %7d  ",$tcount;
  printf LOG "TOTAL  %7d  ",$tcount;
  if ($count_pk_pass>0) {
    printf " %7d %5.1f%% ",$count_pk_pass,100*$count_pk_pass/$tcount;
    printf LOG " %7d %5.1f%% ",$count_pk_pass,100*$count_pk_pass/$tcount;
  } else {
    print ' 'x16;
    print LOG ' 'x16;
  }
  if ($count_pk_fail>0) {
    printf " %7d %5.1f%% ",$count_pk_fail,100*$count_pk_fail/$tcount;
    printf LOG " %7d %5.1f%% ",$count_pk_fail,100*$count_pk_fail/$tcount;
  } else {
    print ' 'x16;
    print LOG ' 'x16;
  }
  if ($count_pk_skip>0) {
    printf " %7d %5.1f%% ",$count_pk_skip,100*$count_pk_skip/$tcount;
    printf LOG " %7d %5.1f%% ",$count_pk_skip,100*$count_pk_skip/$tcount;
  } else {
    print ' 'x16;
    print LOG ' 'x16;
  }
  if ($count_pk_epic>0) {
    printf " %7d %5.1f%%",$count_pk_epic,100*$count_pk_epic/$tcount;
    printf LOG " %7d %5.1f%%",$count_pk_epic,100*$count_pk_epic/$tcount;
  }
  print "\n\n";
  print LOG "\n\n";
}

# run general tests
if ($#todo_tests>=0) {
  print 'Running '.($#todo_tests+1)." general tests...\n";
  print LOG 'Running '.($#todo_tests+1)." general tests...\n";

  $count_pass=0;
  $count_fail=0;
  $count_skip=0;
  $count_epic=0;

  foreach (@todo_tests) {
    if (($child=fork)==0) {
      open(STDOUT,'>',"$log_dir/$_.log");
      open(STDERR,'>&STDOUT');
      exec "$test_dir/$_";
      exit(255);
    }
    waitpid($child,0);
    $result=$?>>8;
    if ($result==0) {
      $count_pass++;
      print "${green}PASS$normal: $_\n";
      print LOG "PASS: $_\n";
    } elsif ($result==77) {
      $count_skip++;
      print "${cyan}SKIP$normal: $_\n";
      print LOG "SKIP: $_\n";
    } elsif ($result==99) {
      $count_epic++;
      print "${magenta}EPIC$normal: $_\n";
      print LOG "EPIC: $_\n";
    } else {
      $count_fail++;
      print "${red}FAIL$normal: $_\n";
      print LOG "FAIL: $_\n";
    }
  }
  print 'General test subtotals';
  print LOG 'General test subtotals';
  $flag=0;
  if ($count_pass>0) {
    printf " %d/%d (%.01f%%) passed",
      $count_pass,$#todo_tests+1,100*$count_pass/($#todo_tests+1);
    printf LOG " %d/%d (%.01f%%) passed",
      $count_pass,$#todo_tests+1,100*$count_pass/($#todo_tests+1);
    $flag=1;
  }
  if ($count_fail>0) {
    print ';' if $flag;
    print LOG ';' if $flag;
    printf " %d/%d (%.01f%%) failed",
      $count_fail,$#todo_tests+1,100*$count_fail/($#todo_tests+1);
    printf LOG " %d/%d (%.01f%%) failed",
      $count_fail,$#todo_tests+1,100*$count_fail/($#todo_tests+1);
    $flag=1;
  }
  if ($count_skip>0) {
    print ';' if $flag;
    print LOG ';' if $flag;
    printf " %d/%d (%.01f%%) skipped",
      $count_skip,$#todo_tests+1,100*$count_skip/($#todo_tests+1);
    printf LOG " %d/%d (%.01f%%) skipped",
      $count_skip,$#todo_tests+1,100*$count_skip/($#todo_tests+1);
    $flag=1;
  }
  if ($count_epic>0) {
    print ';' if $flag;
    print LOG ';' if $flag;
    printf " %d/%d (%.01f%%) epic failed",
      $count_epic,$#todo_tests+1,100*$count_epic/($#todo_tests+1);
    printf LOG " %d/%d (%.01f%%) epic failed",
      $count_epic,$#todo_tests+1,100*$count_epic/($#todo_tests+1);
  }
  print ".\n\n";
  print LOG ".\n\n";
}

# return value of suite based on the worst result, or skip if none
if ($count_epic+$count_pk_epic>0) {
  print "${magenta}=======================\n"
                 ."Test suite EPIC FAILED.\n"
                 ."=======================$normal\n";
  print LOG "=======================\n"
           ."Test suite EPIC FAILED.\n"
           ."=======================\n";
  exit 99;
} elsif ($count_fail+$count_pk_fail>0) {
  print "${red}==================\n"
             ."Test suite FAILED.\n"
             ."==================$normal\n";
  print LOG "==================\n"
           ."Test suite FAILED.\n"
           ."==================\n";
  exit 1;
} elsif ($count_pass+$count_pk_pass>0) {
  print "${green}==================\n"
               ."Test suite PASSED.\n"
               ."==================$normal\n";
  print LOG "==================\n"
           ."Test suite PASSED.\n"
           ."==================\n";
  exit 0;
} else {
  print "${cyan}===================\n"
              ."Test suite SKIPPED.\n"
              ."===================$normal\n";
  print LOG "===================\n"
           ."Test suite SKIPPED.\n"
           ."===================\n";
  exit 77;
}
