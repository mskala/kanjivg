Extra README file for Matthew Skala's fork:

RATIONALE

I have some ideas regarding things that would be nice to have in KanjiVG. 
These are related to uses I would like to make of the data.  Not everyone
will necessarily agree that theseare improvements, and it's not appropriate
to put them in the main repository.  So instead I'm putting my proposals
here, and then anyone else is free to look at them, use them if desired, or
not.

I'm trying not to touch anything in the repository that isn't actually the
stuff I'm working on; as a result, there exist some files (notably, as of
this writing April 3 2012, the main README and all the code I didn't write
except kvg.py) that refer to outdated file formats and directory layouts.

STROKE NUMBERS

The "addstrokenum" script is included for future reference, but by the time
you read this it should already have been run, and won't need to be run
again unless future additions and modifications to the database don't
maintain the stroke number data.

AUTOTOOLS

Quick reference:

    ./configure
    make
    make check

In more detail:

Anything that needs to be configured should have appropriate code to
configure it placed in configure.ac.  Anything that needs to be executed
should go under an appropriate target in Makefile.in.  Make is not only for
compiling C.  The configure and Makefile.in files are checked into git so
that persons working on other code and not on the build system can still run
the build system without needing Autotools installations of their own; but
configure and Makefile.in should not be edited directly.  Edit configure.ac
and Makefile.am instead, then run "autoreconf" to rebuild the configure and
Makefile.in files.  The equivalent of autoreconf will also be run
automatically by "make", if you have the appropriate tools installed and
you have edited Makefile.am or configure.ac.

MAKEFILE

Quick reference:

   make            - rebuilds the distribution .zip and .xml.gz files
   make check      - runs test suite (takes a while!)
   make check-new  - updates test results for edited kanji

In more detail:

The "make" default target builds the current data distribution .zip and
.xml.gz files.  At one time, when I believed what is currently written in
the main README, it would also build the .svg files from the stuff in the
SVG and XML directories; I'm now told that that's not the intended workflow,
so make is less necessary for that step, but it's still nice to have for the
other targets described below.  The data distribution files have the current
date embedded in their filenames; that is the date when "configure" was most
recently run.  This target performs basically the same function as the
"updatepublic.sh" script, except that it doesn't require zip, gzip, and
Python 2 to be installed under the names assumed by the shell script.

The "make check" target runs the test suite, completely from scratch; see
below.  That takes a while because of the thousands of kanji and multiple
tests on each one; after check has been run once, you can run "make
check-new" to re-use whatever is re-usable of previously run test logs, so
that in general only new tests or newly edited kanji have to be re-run.  On
my system, "make check-new" with no changes completes in a few seconds.

Autotools in general encourages the use of a "make dist" target to generate
a distribution.  In our case, that will generate a *complete* distribution
including the build tools and scripts, unlike the distributions generated by
default "make" which are only distributions of the data files.  At present I
haven't tested this kind of distribution and it probably won't work; I don't
know if it ever will, but for the moment, a Git checkout is the recommended
way to get the build and testing tools.

TEST SUITE

Quick reference:

Tests live in the "test" directory; their results when run go into the
"test_log" directory.  The test/run-tests Perl script runs tests, presenting
an interface (to the tests) that looks like Automake's interface. 
Individual tests can be "general" tests run once, or "per-kanji" tests run
once for every kanji.  A complete log of the results goes into
test_log/suite.log; logs of individual general tests are named after the
tests in question; logs of per-kanji tests are rolled up with all tests on
each kanji written in a single file named after the kanji.

Running tests without first running configure and make is not encouraged,
but you can do it with:

   test/run-tests         (equivalent to make check)
   test/run-tests -n      (equivalent to make check-new)

These should be run from the main kanjivg directory.

In more detail:

Each test should be an executable file in the test directory.  When it's
run, it should produce an exit code indicating the result: zero for success,
77 for "skip" (means the test could not be run, but for reasons that are not
a problem; for instance, if it is not applicable to the current
configuration or would require a tool that isn't present), 99 for "epic
fail" (not encouraged but kept for Automake compatibility; indicates that
the test failed in a way that should be noted even if the user wanted to
ignore ordinary failures), any other nonzero for ordinary failure.  Standard
output and error are redirected to the log file.  The "suite.log" file only
includes per-kanji logs when at least one test on that kanji gave a FAIL or
EPIC result; complete logs are always available in the per-kanji files.  In
the case of per-kanji tests, the test program will be given a single
command-line argument equal to the "ID" of the kanji, which is the basename
of the corresponding file in kanji/ , without the directory or the
.svg extension.  Tests should be listed in the appropriate arrays at the
head of test/run-tests , according to the documentation there.

The run-tests script accepts a single command line argument of "-n" to
activate "new" mode, in which it will only run a per-kanji test when it
can't find the result of running that test in the log files already.  This
saves a LOT of time when running the test suite other than the first time. 
I'd wanted to use Automake's "parallel" test driver script (that being part
of the original motivation for using Automake) in the first place, but it
turns out that that script cannot handle running tens of thousands of tests
at a time (several per kanji file, at least 6660 and possibly more than
11000 kanji files) because of shell command-line length limitations.  Hence
run-tests.

Note that in "new" mode any stored test results will be trusted.  If they
are inaccurate - for instance, if you have changed a test script in a way
that will cause it to give different results - then you must actually re-run
the relevant scripts (for instance with "make check") instead of using "new"
mode.  Garbage in, garbage out.

Other configuration for run-tests can be done through environment variables,
which eventually should be settable by the configure script:

   KANJI_GLOB
   Shell glob for kanji files.  This can be used to test just a range of
   the kanji files, which may be useful to save time during test
   development when tests must be re-run repeatedly.  Default is all
   files in kanji/ with five-character base names plus '.svg' extensions;
   this follows the practice of kvg.py.  Example to check only U+4E00
   through U+4EFF:

      make KANJI_GLOB='kanji/04e??.svg' check

   TESTS
   List of *general* tests to be run, comma or space separated.  At present
   the only general test available is "per-kanji" which is a magic value
   representing all the per-kanji tests.  Example (only usable if the
   "dummy" line in run-tests is uncommented):

      make TESTS='dummy,per-kanji' check

   PK_TESTS
   List of *per-kanji* tests to be run; only used if per-kanji was selected;
   otherwise similar.  Example:

      make PK_TESTS='strokenum' check

All these environment variables can also be set in the usual way before
running run-tests, if you're not using make.

Tests currently implemented (may not always be kept up to date; always trust
the code over the list here):

   dummy (general), dummy-pk (per-kanji)
   (Currently commented out, for testing of run-tests itself only)
   Non-tests that just return a constant result.
   
   xml (per-kanji)
   Checks that the kanji SVG file can be parsed as XML and doesn't contain
   any unexpected tag names.  At some point in the future this might also do
   a more carefuly DTD validation.
   
   strokenum (per-kanji)
   Checks that every stroke has a number and each number from 1 up to the
   number of strokes occurs exactly once; they explicitly do NOT have to
   occur in sequential order in the file because that's the point of having
   them.

   gpmix (per-kanji)
   Checks that no group contains both strokes and sub-groups at the same
   level.  This is a tough standard, violated by most kanji in the
   database at this writing, but I wish it could be upheld.

At this writing the expected result is for all these to pass except gpmix,
which fails about half the time.

LICENSING AND CONTACT

I am dual-licensing my contributions under the GPL (version 3 or later) and
Creative Commons CC-BY-SA licenses.  Be aware that others have licensed
their contributions under each of these licenses alone.  You're on your own
as to to what extent it's acceptable to mix materials with differing
licenses, except that it is my intention for my own dual-licensed
contributions to be available for mixing with both.  It would be not wholly
inaccurate to use the analogy that Ulrich's material is meat, Alex's is
dairy, and mine is pareve.  As of this writing, the main README file bears
only Ulrich's copyright notice referring to the kanji data itself, but much
of the code bears other notices which apply within their scope.

For more information on this project, see the project's main repository
(KanjiVG/kanjivg on Github) and the information linked from there.

Matthew Skala
mskala@ansuz.sooke.bc.ca
